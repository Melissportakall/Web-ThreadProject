{"ast":null,"code":"var _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport './Card.css';\nimport ReactDOM from \"react-dom\";\nimport { Link, useNavigate } from 'react-router-dom';\nimport { Grid, Paper, Typography, Modal, Button, Box, Snackbar, Tabs, Tab } from '@mui/material';\nimport { GoogleMap } from '@react-google-maps/api';\nimport AllEvents from '../AllEvents/AllEvents';\nimport Navbar from '../Navbar/Navbar';\nimport UserCard from '../UserCard/Usercard.jsx';\nconst containerStyle = {\n  width: '100%',\n  height: '400px'\n};\nconst getUserDataFromCookies = () => {\n  const cookies = document.cookie.split('; ');\n  for (let cookie of cookies) {\n    const [key, value] = cookie.split('=');\n    if (key === 'user_data') {\n      return value;\n    }\n  }\n  return null;\n};\nconst MainMenu = () => {\n  _s();\n  const [userData, setUserData] = useState(null);\n  const handleOpen = event => {\n    setSelectedEvent(event);\n    setOpen(true);\n    if (event.location) {\n      fetchCoordinates(event.location);\n    }\n  };\n  const handleClose = () => {\n    setOpen(false);\n    setSelectedEvent(null);\n  };\n  const handleJoin = async () => {\n    if (!selectedEvent) return;\n    try {\n      const userId = getUserDataFromCookies();\n      if (!userId) {\n        console.error(\"User ID bulunamadı.\");\n        setSnackbarMessage(\"Kullanıcı bilgileri bulunamadı. Lütfen giriş yapın.\");\n        setSnackbarOpen(true);\n        return;\n      }\n      const joinedEventsResponse = await fetch(`/get_joined_events`, {\n        method: 'GET',\n        credentials: 'include'\n      });\n      const joinedEventsData = await joinedEventsResponse.json();\n      if (joinedEventsData.events) {\n        const joinedEvents = joinedEventsData.events;\n        const selectedEventDate = new Date(`${selectedEvent.date}T${selectedEvent.time}`);\n        const hasConflict = joinedEvents.some(event => {\n          const eventDate = new Date(`${event.date}T${event.time}`);\n          return eventDate.getTime() === selectedEventDate.getTime();\n        });\n        if (hasConflict) {\n          setSnackbarMessage(\"Aynı tarih ve saatte bir etkinliğiniz zaten mevcut.\");\n          setSnackbarOpen(true);\n          return;\n        }\n      }\n      const joinResponse = await fetch('/join_event', {\n        method: 'POST',\n        body: JSON.stringify({\n          eventId: selectedEvent.id\n        }),\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n      const joinData = await joinResponse.json();\n      if (joinData.success) {\n        console.log('Etkinliğe başarıyla katıldınız!');\n        setSnackbarMessage('Etkinliğe başarıyla katıldınız!');\n        setSnackbarOpen(true);\n      } else {\n        console.error('Katılma işlemi başarısız oldu!');\n        setSnackbarMessage('Katılma işlemi başarısız oldu.');\n        setSnackbarOpen(true);\n      }\n      handleClose();\n    } catch (error) {\n      console.error('Hata:', error);\n      setSnackbarMessage('Bir hata oluştu. Lütfen tekrar deneyin.');\n      setSnackbarOpen(true);\n    }\n  };\n  const handleSnackbarClose = () => {\n    setSnackbarOpen(false);\n  };\n  useEffect(() => {\n    if (isLoaded && map && selectedEvent) {\n      var _window$google$maps$m;\n      if ((_window$google$maps$m = window.google.maps.marker) !== null && _window$google$maps$m !== void 0 && _window$google$maps$m.AdvancedMarkerElement) {\n        const marker = new window.google.maps.marker.AdvancedMarkerElement({\n          map,\n          position: markerPosition\n        });\n        return () => {\n          marker.setMap(null);\n        };\n      } else {\n        const marker = new window.google.maps.Marker({\n          map,\n          position: markerPosition\n        });\n        return () => {\n          marker.setMap(null);\n        };\n      }\n    }\n  }, [isLoaded, map, selectedEvent, markerPosition]);\n  useEffect(() => {\n    document.title = 'Main Menu';\n    const fetchUserData = async () => {\n      const userId = getUserDataFromCookies();\n      if (!userId) return;\n      try {\n        const userInfoResponse = await fetch(`/get_user_info?user_id=${userId}`, {\n          method: 'GET',\n          credentials: 'include'\n        });\n        const userInfo = await userInfoResponse.json();\n        if (userInfo.success) {\n          setUserData(userInfo.user);\n          const joinedEventsResponse = await fetch(`/get_joined_events`, {\n            method: 'GET',\n            credentials: 'include'\n          });\n          const joinedEventsData = await joinedEventsResponse.json();\n          if (joinedEventsData.events) {\n            const now = new Date();\n            const pastEvents = joinedEventsData.events.filter(event => {\n              const eventDate = new Date(`${event.date}T${event.time}`);\n              return eventDate < now;\n            });\n            const categoryFrequency = {};\n            pastEvents.forEach(event => {\n              if (event.category) {\n                let categories = [];\n                try {\n                  categories = JSON.parse(event.category);\n                } catch (error) {\n                  categories = event.category.split(',').map(cat => cat.trim());\n                }\n                categories.forEach(category => {\n                  const categoryName = Array.isArray(category) ? category.join(\", \") : category;\n                  categoryFrequency[categoryName] = (categoryFrequency[categoryName] || 0) + 1;\n                });\n              }\n            });\n            if (userInfo.user.interests) {\n              let interestsArray;\n              try {\n                interestsArray = JSON.parse(userInfo.user.interests);\n              } catch (error) {\n                interestsArray = userInfo.user.interests.split(',').map(interest => interest.trim());\n              }\n              interestsArray.forEach(interest => {\n                categoryFrequency[interest] = (categoryFrequency[interest] || 0) + 1;\n              });\n            }\n            console.log(\"Profil kategorileri: \", categoryFrequency);\n            setInterestedCategories(categoryFrequency);\n            const allEventsResponse = await fetch(`/get_all_events`, {\n              method: 'GET',\n              credentials: 'include'\n            });\n            const allEventsData = await allEventsResponse.json();\n            if (allEventsData.events) {\n              const futureEvents = allEventsData.events.filter(event => {\n                const eventDate = new Date(`${event.date}T${event.time}`);\n                return eventDate >= now;\n              });\n              console.log(\"Future events before excluding joined:\", futureEvents);\n              const joinedEventIds = joinedEventsData.events.map(event => event.id);\n              const futureEventsExcludingJoined = futureEvents.filter(event => !joinedEventIds.includes(event.id));\n              console.log(\"Future events after excluding joined:\", futureEventsExcludingJoined);\n              const filteredEvents = futureEventsExcludingJoined.filter(event => {\n                let eventCategories = [];\n                try {\n                  eventCategories = JSON.parse(event.category);\n                } catch {\n                  console.error(`Failed to parse category for event: ${event.event_name}`);\n                }\n                return eventCategories.some(category => categoryFrequency[category]);\n              });\n              setInterestedEvents(filteredEvents);\n            }\n          }\n        }\n      } catch (error) {\n        console.error('Error fetching data:', error);\n      }\n    };\n    fetchUserData();\n  }, []);\n  return () => {};\n};\n_s(MainMenu, \"TQNVvcKiUYzZuEIMV0orH9dzTC8=\");\n_c = MainMenu;\nexport default MainMenu;\nvar _c;\n$RefreshReg$(_c, \"MainMenu\");","map":{"version":3,"names":["React","useEffect","useState","ReactDOM","Link","useNavigate","Grid","Paper","Typography","Modal","Button","Box","Snackbar","Tabs","Tab","GoogleMap","AllEvents","Navbar","UserCard","containerStyle","width","height","getUserDataFromCookies","cookies","document","cookie","split","key","value","MainMenu","_s","userData","setUserData","handleOpen","event","setSelectedEvent","setOpen","location","fetchCoordinates","handleClose","handleJoin","selectedEvent","userId","console","error","setSnackbarMessage","setSnackbarOpen","joinedEventsResponse","fetch","method","credentials","joinedEventsData","json","events","joinedEvents","selectedEventDate","Date","date","time","hasConflict","some","eventDate","getTime","joinResponse","body","JSON","stringify","eventId","id","headers","joinData","success","log","handleSnackbarClose","isLoaded","map","_window$google$maps$m","window","google","maps","marker","AdvancedMarkerElement","position","markerPosition","setMap","Marker","title","fetchUserData","userInfoResponse","userInfo","user","now","pastEvents","filter","categoryFrequency","forEach","category","categories","parse","cat","trim","categoryName","Array","isArray","join","interests","interestsArray","interest","setInterestedCategories","allEventsResponse","allEventsData","futureEvents","joinedEventIds","futureEventsExcludingJoined","includes","filteredEvents","eventCategories","event_name","setInterestedEvents","_c","$RefreshReg$"],"sources":["/Users/melisportakal/Desktop/proje-son/src/Components/MainMenu/MainMenu.jsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport './Card.css';\nimport ReactDOM from \"react-dom\";\nimport { Link, useNavigate } from 'react-router-dom';\nimport { Grid, Paper, Typography, Modal, Button, Box, Snackbar, Tabs, Tab } from '@mui/material';\nimport { GoogleMap } from '@react-google-maps/api';\nimport AllEvents from '../AllEvents/AllEvents';\nimport Navbar from '../Navbar/Navbar';\nimport UserCard from '../UserCard/Usercard.jsx'\n\nconst containerStyle = {\n  width: '100%',\n  height: '400px',\n};\n\nconst getUserDataFromCookies = () => {\n  const cookies = document.cookie.split('; ');\n  for (let cookie of cookies) {\n    const [key, value] = cookie.split('=');\n    if (key === 'user_data') {\n      return value;\n    }\n  }\n  return null;\n};\n\nconst MainMenu = () => {\n  const [userData, setUserData] = useState(null);\n  \n  \n\n  \n    \n   \n\n  \n\n  const handleOpen = (event) => {\n    setSelectedEvent(event);\n    setOpen(true);\n\n    if (event.location) {\n      fetchCoordinates(event.location);\n    }\n  };\n\n  const handleClose = () => {\n    setOpen(false);\n    setSelectedEvent(null);\n  };\n\n  const handleJoin = async () => {\n    if (!selectedEvent) return;\n  \n    try {\n      const userId = getUserDataFromCookies();\n      if (!userId) {\n        console.error(\"User ID bulunamadı.\");\n        setSnackbarMessage(\"Kullanıcı bilgileri bulunamadı. Lütfen giriş yapın.\");\n        setSnackbarOpen(true);\n        return;\n      }\n  \n      const joinedEventsResponse = await fetch(`/get_joined_events`, {\n        method: 'GET',\n        credentials: 'include',\n      });\n      const joinedEventsData = await joinedEventsResponse.json();\n  \n      if (joinedEventsData.events) {\n        const joinedEvents = joinedEventsData.events;\n  \n        const selectedEventDate = new Date(`${selectedEvent.date}T${selectedEvent.time}`);\n        const hasConflict = joinedEvents.some(event => {\n          const eventDate = new Date(`${event.date}T${event.time}`);\n          return eventDate.getTime() === selectedEventDate.getTime();\n        });\n  \n        if (hasConflict) {\n          setSnackbarMessage(\"Aynı tarih ve saatte bir etkinliğiniz zaten mevcut.\");\n          setSnackbarOpen(true);\n          return;\n        }\n      }\n  \n      const joinResponse = await fetch('/join_event', {\n        method: 'POST',\n        body: JSON.stringify({ eventId: selectedEvent.id }),\n        headers: {\n          'Content-Type': 'application/json',\n        },\n      });\n  \n      const joinData = await joinResponse.json();\n      if (joinData.success) {\n        console.log('Etkinliğe başarıyla katıldınız!');\n        setSnackbarMessage('Etkinliğe başarıyla katıldınız!');\n        setSnackbarOpen(true);\n      } else {\n        console.error('Katılma işlemi başarısız oldu!');\n        setSnackbarMessage('Katılma işlemi başarısız oldu.');\n        setSnackbarOpen(true);\n      }\n  \n      handleClose();\n    } catch (error) {\n      console.error('Hata:', error);\n      setSnackbarMessage('Bir hata oluştu. Lütfen tekrar deneyin.');\n      setSnackbarOpen(true);\n    }\n  };  \n  \n  const handleSnackbarClose = () => {\n    setSnackbarOpen(false);\n  };\n\n  useEffect(() => {\n    if (isLoaded && map && selectedEvent) {\n      if (window.google.maps.marker?.AdvancedMarkerElement) {\n        const marker = new window.google.maps.marker.AdvancedMarkerElement({\n          map,\n          position: markerPosition,\n        });\n\n        return () => {\n          marker.setMap(null);\n        };\n      } else {\n        const marker = new window.google.maps.Marker({\n          map,\n          position: markerPosition,\n        });\n\n        return () => {\n          marker.setMap(null);\n        };\n      }\n    }\n  }, [isLoaded, map, selectedEvent, markerPosition]);\n\n  useEffect(() => {\n    document.title = 'Main Menu';\n\n    const fetchUserData = async () => {\n        const userId = getUserDataFromCookies();\n        if (!userId) return;\n\n        try {\n            const userInfoResponse = await fetch(`/get_user_info?user_id=${userId}`, {\n                method: 'GET',\n                credentials: 'include',\n            });\n            const userInfo = await userInfoResponse.json();\n\n            if (userInfo.success) {\n                setUserData(userInfo.user);\n\n                const joinedEventsResponse = await fetch(`/get_joined_events`, {\n                    method: 'GET',\n                    credentials: 'include',\n                });\n                const joinedEventsData = await joinedEventsResponse.json();\n\n                if (joinedEventsData.events) {\n                    const now = new Date();\n                    const pastEvents = joinedEventsData.events.filter(event => {\n                        const eventDate = new Date(`${event.date}T${event.time}`);\n                        return eventDate < now;\n                    });\n\n                    const categoryFrequency = {};\n\n                    pastEvents.forEach(event => {\n                        if (event.category) {\n                            let categories = [];\n\n                            try {\n                                categories = JSON.parse(event.category);\n                            } catch (error) {\n                                categories = event.category.split(',').map(cat => cat.trim());\n                            }\n\n                            categories.forEach(category => {\n                                const categoryName = Array.isArray(category) ? category.join(\", \") : category;\n\n                                categoryFrequency[categoryName] = (categoryFrequency[categoryName] || 0) + 1;\n                            });\n                        }\n                    });\n\n                    if (userInfo.user.interests) {\n                        let interestsArray;\n\n                        try {\n                            interestsArray = JSON.parse(userInfo.user.interests);\n                        } catch (error) {\n                            interestsArray = userInfo.user.interests.split(',').map(interest => interest.trim());\n                        }\n\n                        interestsArray.forEach(interest => {\n                            categoryFrequency[interest] = (categoryFrequency[interest] || 0) + 1;\n                        });\n                    }\n\n                    console.log(\"Profil kategorileri: \", categoryFrequency);\n\n                    setInterestedCategories(categoryFrequency);\n\n                    const allEventsResponse = await fetch(`/get_all_events`, {\n                      method: 'GET',\n                      credentials: 'include',\n                    });\n                    const allEventsData = await allEventsResponse.json();\n                    \n                    if (allEventsData.events) {\n                      const futureEvents = allEventsData.events.filter(event => {\n                        const eventDate = new Date(`${event.date}T${event.time}`);\n                        return eventDate >= now;\n                      });\n                    \n                      console.log(\"Future events before excluding joined:\", futureEvents);\n                    \n                      const joinedEventIds = joinedEventsData.events.map(event => event.id);\n                    \n                      const futureEventsExcludingJoined = futureEvents.filter(event => !joinedEventIds.includes(event.id));\n                    \n                      console.log(\"Future events after excluding joined:\", futureEventsExcludingJoined);\n                    \n                      const filteredEvents = futureEventsExcludingJoined.filter(event => {\n                        let eventCategories = [];\n                    \n                        try {\n                          eventCategories = JSON.parse(event.category);\n                        } catch {\n                          console.error(`Failed to parse category for event: ${event.event_name}`);\n                        }\n                    \n                        return eventCategories.some(category => categoryFrequency[category]);\n                      });\n                    \n                      setInterestedEvents(filteredEvents);\n                  }                  \n                }\n            }\n        } catch (error) {\n            console.error('Error fetching data:', error);\n        }\n    };\n\n    fetchUserData();\n  }, []);\n\n  return () => {\n    \n\n      \n        \n      \n     \n\n        \n\n      \n   \n  }\n};\n\nexport default MainMenu;\n"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,OAAO,YAAY;AACnB,OAAOC,QAAQ,MAAM,WAAW;AAChC,SAASC,IAAI,EAAEC,WAAW,QAAQ,kBAAkB;AACpD,SAASC,IAAI,EAAEC,KAAK,EAAEC,UAAU,EAAEC,KAAK,EAAEC,MAAM,EAAEC,GAAG,EAAEC,QAAQ,EAAEC,IAAI,EAAEC,GAAG,QAAQ,eAAe;AAChG,SAASC,SAAS,QAAQ,wBAAwB;AAClD,OAAOC,SAAS,MAAM,wBAAwB;AAC9C,OAAOC,MAAM,MAAM,kBAAkB;AACrC,OAAOC,QAAQ,MAAM,0BAA0B;AAE/C,MAAMC,cAAc,GAAG;EACrBC,KAAK,EAAE,MAAM;EACbC,MAAM,EAAE;AACV,CAAC;AAED,MAAMC,sBAAsB,GAAGA,CAAA,KAAM;EACnC,MAAMC,OAAO,GAAGC,QAAQ,CAACC,MAAM,CAACC,KAAK,CAAC,IAAI,CAAC;EAC3C,KAAK,IAAID,MAAM,IAAIF,OAAO,EAAE;IAC1B,MAAM,CAACI,GAAG,EAAEC,KAAK,CAAC,GAAGH,MAAM,CAACC,KAAK,CAAC,GAAG,CAAC;IACtC,IAAIC,GAAG,KAAK,WAAW,EAAE;MACvB,OAAOC,KAAK;IACd;EACF;EACA,OAAO,IAAI;AACb,CAAC;AAED,MAAMC,QAAQ,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACrB,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAG9B,QAAQ,CAAC,IAAI,CAAC;EAU9C,MAAM+B,UAAU,GAAIC,KAAK,IAAK;IAC5BC,gBAAgB,CAACD,KAAK,CAAC;IACvBE,OAAO,CAAC,IAAI,CAAC;IAEb,IAAIF,KAAK,CAACG,QAAQ,EAAE;MAClBC,gBAAgB,CAACJ,KAAK,CAACG,QAAQ,CAAC;IAClC;EACF,CAAC;EAED,MAAME,WAAW,GAAGA,CAAA,KAAM;IACxBH,OAAO,CAAC,KAAK,CAAC;IACdD,gBAAgB,CAAC,IAAI,CAAC;EACxB,CAAC;EAED,MAAMK,UAAU,GAAG,MAAAA,CAAA,KAAY;IAC7B,IAAI,CAACC,aAAa,EAAE;IAEpB,IAAI;MACF,MAAMC,MAAM,GAAGpB,sBAAsB,CAAC,CAAC;MACvC,IAAI,CAACoB,MAAM,EAAE;QACXC,OAAO,CAACC,KAAK,CAAC,qBAAqB,CAAC;QACpCC,kBAAkB,CAAC,qDAAqD,CAAC;QACzEC,eAAe,CAAC,IAAI,CAAC;QACrB;MACF;MAEA,MAAMC,oBAAoB,GAAG,MAAMC,KAAK,CAAC,oBAAoB,EAAE;QAC7DC,MAAM,EAAE,KAAK;QACbC,WAAW,EAAE;MACf,CAAC,CAAC;MACF,MAAMC,gBAAgB,GAAG,MAAMJ,oBAAoB,CAACK,IAAI,CAAC,CAAC;MAE1D,IAAID,gBAAgB,CAACE,MAAM,EAAE;QAC3B,MAAMC,YAAY,GAAGH,gBAAgB,CAACE,MAAM;QAE5C,MAAME,iBAAiB,GAAG,IAAIC,IAAI,CAAC,GAAGf,aAAa,CAACgB,IAAI,IAAIhB,aAAa,CAACiB,IAAI,EAAE,CAAC;QACjF,MAAMC,WAAW,GAAGL,YAAY,CAACM,IAAI,CAAC1B,KAAK,IAAI;UAC7C,MAAM2B,SAAS,GAAG,IAAIL,IAAI,CAAC,GAAGtB,KAAK,CAACuB,IAAI,IAAIvB,KAAK,CAACwB,IAAI,EAAE,CAAC;UACzD,OAAOG,SAAS,CAACC,OAAO,CAAC,CAAC,KAAKP,iBAAiB,CAACO,OAAO,CAAC,CAAC;QAC5D,CAAC,CAAC;QAEF,IAAIH,WAAW,EAAE;UACfd,kBAAkB,CAAC,qDAAqD,CAAC;UACzEC,eAAe,CAAC,IAAI,CAAC;UACrB;QACF;MACF;MAEA,MAAMiB,YAAY,GAAG,MAAMf,KAAK,CAAC,aAAa,EAAE;QAC9CC,MAAM,EAAE,MAAM;QACde,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UAAEC,OAAO,EAAE1B,aAAa,CAAC2B;QAAG,CAAC,CAAC;QACnDC,OAAO,EAAE;UACP,cAAc,EAAE;QAClB;MACF,CAAC,CAAC;MAEF,MAAMC,QAAQ,GAAG,MAAMP,YAAY,CAACX,IAAI,CAAC,CAAC;MAC1C,IAAIkB,QAAQ,CAACC,OAAO,EAAE;QACpB5B,OAAO,CAAC6B,GAAG,CAAC,iCAAiC,CAAC;QAC9C3B,kBAAkB,CAAC,iCAAiC,CAAC;QACrDC,eAAe,CAAC,IAAI,CAAC;MACvB,CAAC,MAAM;QACLH,OAAO,CAACC,KAAK,CAAC,gCAAgC,CAAC;QAC/CC,kBAAkB,CAAC,gCAAgC,CAAC;QACpDC,eAAe,CAAC,IAAI,CAAC;MACvB;MAEAP,WAAW,CAAC,CAAC;IACf,CAAC,CAAC,OAAOK,KAAK,EAAE;MACdD,OAAO,CAACC,KAAK,CAAC,OAAO,EAAEA,KAAK,CAAC;MAC7BC,kBAAkB,CAAC,yCAAyC,CAAC;MAC7DC,eAAe,CAAC,IAAI,CAAC;IACvB;EACF,CAAC;EAED,MAAM2B,mBAAmB,GAAGA,CAAA,KAAM;IAChC3B,eAAe,CAAC,KAAK,CAAC;EACxB,CAAC;EAED7C,SAAS,CAAC,MAAM;IACd,IAAIyE,QAAQ,IAAIC,GAAG,IAAIlC,aAAa,EAAE;MAAA,IAAAmC,qBAAA;MACpC,KAAAA,qBAAA,GAAIC,MAAM,CAACC,MAAM,CAACC,IAAI,CAACC,MAAM,cAAAJ,qBAAA,eAAzBA,qBAAA,CAA2BK,qBAAqB,EAAE;QACpD,MAAMD,MAAM,GAAG,IAAIH,MAAM,CAACC,MAAM,CAACC,IAAI,CAACC,MAAM,CAACC,qBAAqB,CAAC;UACjEN,GAAG;UACHO,QAAQ,EAAEC;QACZ,CAAC,CAAC;QAEF,OAAO,MAAM;UACXH,MAAM,CAACI,MAAM,CAAC,IAAI,CAAC;QACrB,CAAC;MACH,CAAC,MAAM;QACL,MAAMJ,MAAM,GAAG,IAAIH,MAAM,CAACC,MAAM,CAACC,IAAI,CAACM,MAAM,CAAC;UAC3CV,GAAG;UACHO,QAAQ,EAAEC;QACZ,CAAC,CAAC;QAEF,OAAO,MAAM;UACXH,MAAM,CAACI,MAAM,CAAC,IAAI,CAAC;QACrB,CAAC;MACH;IACF;EACF,CAAC,EAAE,CAACV,QAAQ,EAAEC,GAAG,EAAElC,aAAa,EAAE0C,cAAc,CAAC,CAAC;EAElDlF,SAAS,CAAC,MAAM;IACduB,QAAQ,CAAC8D,KAAK,GAAG,WAAW;IAE5B,MAAMC,aAAa,GAAG,MAAAA,CAAA,KAAY;MAC9B,MAAM7C,MAAM,GAAGpB,sBAAsB,CAAC,CAAC;MACvC,IAAI,CAACoB,MAAM,EAAE;MAEb,IAAI;QACA,MAAM8C,gBAAgB,GAAG,MAAMxC,KAAK,CAAC,0BAA0BN,MAAM,EAAE,EAAE;UACrEO,MAAM,EAAE,KAAK;UACbC,WAAW,EAAE;QACjB,CAAC,CAAC;QACF,MAAMuC,QAAQ,GAAG,MAAMD,gBAAgB,CAACpC,IAAI,CAAC,CAAC;QAE9C,IAAIqC,QAAQ,CAAClB,OAAO,EAAE;UAClBvC,WAAW,CAACyD,QAAQ,CAACC,IAAI,CAAC;UAE1B,MAAM3C,oBAAoB,GAAG,MAAMC,KAAK,CAAC,oBAAoB,EAAE;YAC3DC,MAAM,EAAE,KAAK;YACbC,WAAW,EAAE;UACjB,CAAC,CAAC;UACF,MAAMC,gBAAgB,GAAG,MAAMJ,oBAAoB,CAACK,IAAI,CAAC,CAAC;UAE1D,IAAID,gBAAgB,CAACE,MAAM,EAAE;YACzB,MAAMsC,GAAG,GAAG,IAAInC,IAAI,CAAC,CAAC;YACtB,MAAMoC,UAAU,GAAGzC,gBAAgB,CAACE,MAAM,CAACwC,MAAM,CAAC3D,KAAK,IAAI;cACvD,MAAM2B,SAAS,GAAG,IAAIL,IAAI,CAAC,GAAGtB,KAAK,CAACuB,IAAI,IAAIvB,KAAK,CAACwB,IAAI,EAAE,CAAC;cACzD,OAAOG,SAAS,GAAG8B,GAAG;YAC1B,CAAC,CAAC;YAEF,MAAMG,iBAAiB,GAAG,CAAC,CAAC;YAE5BF,UAAU,CAACG,OAAO,CAAC7D,KAAK,IAAI;cACxB,IAAIA,KAAK,CAAC8D,QAAQ,EAAE;gBAChB,IAAIC,UAAU,GAAG,EAAE;gBAEnB,IAAI;kBACAA,UAAU,GAAGhC,IAAI,CAACiC,KAAK,CAAChE,KAAK,CAAC8D,QAAQ,CAAC;gBAC3C,CAAC,CAAC,OAAOpD,KAAK,EAAE;kBACZqD,UAAU,GAAG/D,KAAK,CAAC8D,QAAQ,CAACtE,KAAK,CAAC,GAAG,CAAC,CAACiD,GAAG,CAACwB,GAAG,IAAIA,GAAG,CAACC,IAAI,CAAC,CAAC,CAAC;gBACjE;gBAEAH,UAAU,CAACF,OAAO,CAACC,QAAQ,IAAI;kBAC3B,MAAMK,YAAY,GAAGC,KAAK,CAACC,OAAO,CAACP,QAAQ,CAAC,GAAGA,QAAQ,CAACQ,IAAI,CAAC,IAAI,CAAC,GAAGR,QAAQ;kBAE7EF,iBAAiB,CAACO,YAAY,CAAC,GAAG,CAACP,iBAAiB,CAACO,YAAY,CAAC,IAAI,CAAC,IAAI,CAAC;gBAChF,CAAC,CAAC;cACN;YACJ,CAAC,CAAC;YAEF,IAAIZ,QAAQ,CAACC,IAAI,CAACe,SAAS,EAAE;cACzB,IAAIC,cAAc;cAElB,IAAI;gBACAA,cAAc,GAAGzC,IAAI,CAACiC,KAAK,CAACT,QAAQ,CAACC,IAAI,CAACe,SAAS,CAAC;cACxD,CAAC,CAAC,OAAO7D,KAAK,EAAE;gBACZ8D,cAAc,GAAGjB,QAAQ,CAACC,IAAI,CAACe,SAAS,CAAC/E,KAAK,CAAC,GAAG,CAAC,CAACiD,GAAG,CAACgC,QAAQ,IAAIA,QAAQ,CAACP,IAAI,CAAC,CAAC,CAAC;cACxF;cAEAM,cAAc,CAACX,OAAO,CAACY,QAAQ,IAAI;gBAC/Bb,iBAAiB,CAACa,QAAQ,CAAC,GAAG,CAACb,iBAAiB,CAACa,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC;cACxE,CAAC,CAAC;YACN;YAEAhE,OAAO,CAAC6B,GAAG,CAAC,uBAAuB,EAAEsB,iBAAiB,CAAC;YAEvDc,uBAAuB,CAACd,iBAAiB,CAAC;YAE1C,MAAMe,iBAAiB,GAAG,MAAM7D,KAAK,CAAC,iBAAiB,EAAE;cACvDC,MAAM,EAAE,KAAK;cACbC,WAAW,EAAE;YACf,CAAC,CAAC;YACF,MAAM4D,aAAa,GAAG,MAAMD,iBAAiB,CAACzD,IAAI,CAAC,CAAC;YAEpD,IAAI0D,aAAa,CAACzD,MAAM,EAAE;cACxB,MAAM0D,YAAY,GAAGD,aAAa,CAACzD,MAAM,CAACwC,MAAM,CAAC3D,KAAK,IAAI;gBACxD,MAAM2B,SAAS,GAAG,IAAIL,IAAI,CAAC,GAAGtB,KAAK,CAACuB,IAAI,IAAIvB,KAAK,CAACwB,IAAI,EAAE,CAAC;gBACzD,OAAOG,SAAS,IAAI8B,GAAG;cACzB,CAAC,CAAC;cAEFhD,OAAO,CAAC6B,GAAG,CAAC,wCAAwC,EAAEuC,YAAY,CAAC;cAEnE,MAAMC,cAAc,GAAG7D,gBAAgB,CAACE,MAAM,CAACsB,GAAG,CAACzC,KAAK,IAAIA,KAAK,CAACkC,EAAE,CAAC;cAErE,MAAM6C,2BAA2B,GAAGF,YAAY,CAAClB,MAAM,CAAC3D,KAAK,IAAI,CAAC8E,cAAc,CAACE,QAAQ,CAAChF,KAAK,CAACkC,EAAE,CAAC,CAAC;cAEpGzB,OAAO,CAAC6B,GAAG,CAAC,uCAAuC,EAAEyC,2BAA2B,CAAC;cAEjF,MAAME,cAAc,GAAGF,2BAA2B,CAACpB,MAAM,CAAC3D,KAAK,IAAI;gBACjE,IAAIkF,eAAe,GAAG,EAAE;gBAExB,IAAI;kBACFA,eAAe,GAAGnD,IAAI,CAACiC,KAAK,CAAChE,KAAK,CAAC8D,QAAQ,CAAC;gBAC9C,CAAC,CAAC,MAAM;kBACNrD,OAAO,CAACC,KAAK,CAAC,uCAAuCV,KAAK,CAACmF,UAAU,EAAE,CAAC;gBAC1E;gBAEA,OAAOD,eAAe,CAACxD,IAAI,CAACoC,QAAQ,IAAIF,iBAAiB,CAACE,QAAQ,CAAC,CAAC;cACtE,CAAC,CAAC;cAEFsB,mBAAmB,CAACH,cAAc,CAAC;YACvC;UACF;QACJ;MACJ,CAAC,CAAC,OAAOvE,KAAK,EAAE;QACZD,OAAO,CAACC,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;MAChD;IACJ,CAAC;IAED2C,aAAa,CAAC,CAAC;EACjB,CAAC,EAAE,EAAE,CAAC;EAEN,OAAO,MAAM,CAYb,CAAC;AACH,CAAC;AAACzD,EAAA,CA/OID,QAAQ;AAAA0F,EAAA,GAAR1F,QAAQ;AAiPd,eAAeA,QAAQ;AAAC,IAAA0F,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}